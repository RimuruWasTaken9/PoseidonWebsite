{
  "version": 3,
  "sources": ["../../node_modules/react-router/dist/development/dom-export.mjs"],
  "sourcesContent": ["/**\n * react-router v7.1.5\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport {\n  FrameworkContext,\n  RemixErrorBoundary,\n  RouterProvider,\n  createBrowserHistory,\n  createClientRoutes,\n  createClientRoutesWithHMRRevalidationOptOut,\n  createRouter,\n  decodeViaTurboStream,\n  deserializeErrors,\n  getPatchRoutesOnNavigationFunction,\n  getSingleFetchDataStrategy,\n  invariant,\n  mapRouteProperties,\n  matchRoutes,\n  shouldHydrateRouteLoader,\n  useFogOFWarDiscovery\n} from \"./chunk-IR6S3I6Y.mjs\";\n\n// lib/dom-export/dom-router-provider.tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nfunction RouterProvider2(props) {\n  return /* @__PURE__ */ React.createElement(RouterProvider, { flushSync: ReactDOM.flushSync, ...props });\n}\n\n// lib/dom-export/hydrated-router.tsx\nimport * as React2 from \"react\";\nvar ssrInfo = null;\nvar router = null;\nfunction initSsrInfo() {\n  if (!ssrInfo && window.__reactRouterContext && window.__reactRouterManifest && window.__reactRouterRouteModules) {\n    ssrInfo = {\n      context: window.__reactRouterContext,\n      manifest: window.__reactRouterManifest,\n      routeModules: window.__reactRouterRouteModules,\n      stateDecodingPromise: void 0,\n      router: void 0,\n      routerInitialized: false\n    };\n  }\n}\nfunction createHydratedRouter() {\n  initSsrInfo();\n  if (!ssrInfo) {\n    throw new Error(\n      \"You must be using the SSR features of React Router in order to skip passing a `router` prop to `<RouterProvider>`\"\n    );\n  }\n  let localSsrInfo = ssrInfo;\n  if (!ssrInfo.stateDecodingPromise) {\n    let stream = ssrInfo.context.stream;\n    invariant(stream, \"No stream found for single fetch decoding\");\n    ssrInfo.context.stream = void 0;\n    ssrInfo.stateDecodingPromise = decodeViaTurboStream(stream, window).then((value) => {\n      ssrInfo.context.state = value.value;\n      localSsrInfo.stateDecodingPromise.value = true;\n    }).catch((e) => {\n      localSsrInfo.stateDecodingPromise.error = e;\n    });\n  }\n  if (ssrInfo.stateDecodingPromise.error) {\n    throw ssrInfo.stateDecodingPromise.error;\n  }\n  if (!ssrInfo.stateDecodingPromise.value) {\n    throw ssrInfo.stateDecodingPromise;\n  }\n  let routes = createClientRoutes(\n    ssrInfo.manifest.routes,\n    ssrInfo.routeModules,\n    ssrInfo.context.state,\n    ssrInfo.context.isSpaMode\n  );\n  let hydrationData = void 0;\n  if (!ssrInfo.context.isSpaMode) {\n    hydrationData = {\n      ...ssrInfo.context.state,\n      loaderData: { ...ssrInfo.context.state.loaderData }\n    };\n    let initialMatches = matchRoutes(\n      routes,\n      window.location,\n      window.__reactRouterContext?.basename\n    );\n    if (initialMatches) {\n      for (let match of initialMatches) {\n        let routeId = match.route.id;\n        let route = ssrInfo.routeModules[routeId];\n        let manifestRoute = ssrInfo.manifest.routes[routeId];\n        if (route && manifestRoute && shouldHydrateRouteLoader(\n          manifestRoute,\n          route,\n          ssrInfo.context.isSpaMode\n        ) && (route.HydrateFallback || !manifestRoute.hasLoader)) {\n          delete hydrationData.loaderData[routeId];\n        } else if (manifestRoute && !manifestRoute.hasLoader) {\n          hydrationData.loaderData[routeId] = null;\n        }\n      }\n    }\n    if (hydrationData && hydrationData.errors) {\n      hydrationData.errors = deserializeErrors(hydrationData.errors);\n    }\n  }\n  let router2 = createRouter({\n    routes,\n    history: createBrowserHistory(),\n    basename: ssrInfo.context.basename,\n    hydrationData,\n    mapRouteProperties,\n    dataStrategy: getSingleFetchDataStrategy(\n      ssrInfo.manifest,\n      ssrInfo.routeModules,\n      () => router2\n    ),\n    patchRoutesOnNavigation: getPatchRoutesOnNavigationFunction(\n      ssrInfo.manifest,\n      ssrInfo.routeModules,\n      ssrInfo.context.isSpaMode,\n      ssrInfo.context.basename\n    )\n  });\n  ssrInfo.router = router2;\n  if (router2.state.initialized) {\n    ssrInfo.routerInitialized = true;\n    router2.initialize();\n  }\n  router2.createRoutesForHMR = /* spacer so ts-ignore does not affect the right hand of the assignment */\n  createClientRoutesWithHMRRevalidationOptOut;\n  window.__reactRouterDataRouter = router2;\n  return router2;\n}\nfunction HydratedRouter() {\n  if (!router) {\n    router = createHydratedRouter();\n  }\n  let [criticalCss, setCriticalCss] = React2.useState(\n    process.env.NODE_ENV === \"development\" ? ssrInfo?.context.criticalCss : void 0\n  );\n  if (process.env.NODE_ENV === \"development\") {\n    if (ssrInfo) {\n      window.__reactRouterClearCriticalCss = () => setCriticalCss(void 0);\n    }\n  }\n  let [location, setLocation] = React2.useState(router.state.location);\n  React2.useLayoutEffect(() => {\n    if (ssrInfo && ssrInfo.router && !ssrInfo.routerInitialized) {\n      ssrInfo.routerInitialized = true;\n      ssrInfo.router.initialize();\n    }\n  }, []);\n  React2.useLayoutEffect(() => {\n    if (ssrInfo && ssrInfo.router) {\n      return ssrInfo.router.subscribe((newState) => {\n        if (newState.location !== location) {\n          setLocation(newState.location);\n        }\n      });\n    }\n  }, [location]);\n  invariant(ssrInfo, \"ssrInfo unavailable for HydratedRouter\");\n  useFogOFWarDiscovery(\n    router,\n    ssrInfo.manifest,\n    ssrInfo.routeModules,\n    ssrInfo.context.isSpaMode\n  );\n  return (\n    // This fragment is important to ensure we match the <ServerRouter> JSX\n    // structure so that useId values hydrate correctly\n    /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(\n      FrameworkContext.Provider,\n      {\n        value: {\n          manifest: ssrInfo.manifest,\n          routeModules: ssrInfo.routeModules,\n          future: ssrInfo.context.future,\n          criticalCss,\n          isSpaMode: ssrInfo.context.isSpaMode\n        }\n      },\n      /* @__PURE__ */ React2.createElement(RemixErrorBoundary, { location }, /* @__PURE__ */ React2.createElement(RouterProvider2, { router }))\n    ), /* @__PURE__ */ React2.createElement(React2.Fragment, null))\n  );\n}\nexport {\n  HydratedRouter,\n  RouterProvider2 as RouterProvider\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,YAAuB;AACvB,eAA0B;AAM1B,aAAwB;AALxB,SAAS,gBAAgB,OAAO;AAC9B,SAA6B,oBAAc,gBAAgB,EAAE,WAAoB,oBAAW,GAAG,MAAM,CAAC;AACxG;AAIA,IAAI,UAAU;AACd,IAAI,SAAS;AACb,SAAS,cAAc;AACrB,MAAI,CAAC,WAAW,OAAO,wBAAwB,OAAO,yBAAyB,OAAO,2BAA2B;AAC/G,cAAU;AAAA,MACR,SAAS,OAAO;AAAA,MAChB,UAAU,OAAO;AAAA,MACjB,cAAc,OAAO;AAAA,MACrB,sBAAsB;AAAA,MACtB,QAAQ;AAAA,MACR,mBAAmB;AAAA,IACrB;AAAA,EACF;AACF;AACA,SAAS,uBAAuB;AApDhC;AAqDE,cAAY;AACZ,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,MAAI,eAAe;AACnB,MAAI,CAAC,QAAQ,sBAAsB;AACjC,QAAI,SAAS,QAAQ,QAAQ;AAC7B,cAAU,QAAQ,2CAA2C;AAC7D,YAAQ,QAAQ,SAAS;AACzB,YAAQ,uBAAuB,qBAAqB,QAAQ,MAAM,EAAE,KAAK,CAAC,UAAU;AAClF,cAAQ,QAAQ,QAAQ,MAAM;AAC9B,mBAAa,qBAAqB,QAAQ;AAAA,IAC5C,CAAC,EAAE,MAAM,CAAC,MAAM;AACd,mBAAa,qBAAqB,QAAQ;AAAA,IAC5C,CAAC;AAAA,EACH;AACA,MAAI,QAAQ,qBAAqB,OAAO;AACtC,UAAM,QAAQ,qBAAqB;AAAA,EACrC;AACA,MAAI,CAAC,QAAQ,qBAAqB,OAAO;AACvC,UAAM,QAAQ;AAAA,EAChB;AACA,MAAI,SAAS;AAAA,IACX,QAAQ,SAAS;AAAA,IACjB,QAAQ;AAAA,IACR,QAAQ,QAAQ;AAAA,IAChB,QAAQ,QAAQ;AAAA,EAClB;AACA,MAAI,gBAAgB;AACpB,MAAI,CAAC,QAAQ,QAAQ,WAAW;AAC9B,oBAAgB;AAAA,MACd,GAAG,QAAQ,QAAQ;AAAA,MACnB,YAAY,EAAE,GAAG,QAAQ,QAAQ,MAAM,WAAW;AAAA,IACpD;AACA,QAAI,iBAAiB;AAAA,MACnB;AAAA,MACA,OAAO;AAAA,OACP,YAAO,yBAAP,mBAA6B;AAAA,IAC/B;AACA,QAAI,gBAAgB;AAClB,eAAS,SAAS,gBAAgB;AAChC,YAAI,UAAU,MAAM,MAAM;AAC1B,YAAI,QAAQ,QAAQ,aAAa,OAAO;AACxC,YAAI,gBAAgB,QAAQ,SAAS,OAAO,OAAO;AACnD,YAAI,SAAS,iBAAiB;AAAA,UAC5B;AAAA,UACA;AAAA,UACA,QAAQ,QAAQ;AAAA,QAClB,MAAM,MAAM,mBAAmB,CAAC,cAAc,YAAY;AACxD,iBAAO,cAAc,WAAW,OAAO;AAAA,QACzC,WAAW,iBAAiB,CAAC,cAAc,WAAW;AACpD,wBAAc,WAAW,OAAO,IAAI;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AACA,QAAI,iBAAiB,cAAc,QAAQ;AACzC,oBAAc,SAAS,mBAAkB,cAAc,MAAM;AAAA,IAC/D;AAAA,EACF;AACA,MAAI,UAAU,aAAa;AAAA,IACzB;AAAA,IACA,SAAS,qBAAqB;AAAA,IAC9B,UAAU,QAAQ,QAAQ;AAAA,IAC1B;AAAA,IACA;AAAA,IACA,cAAc;AAAA,MACZ,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,IACR;AAAA,IACA,yBAAyB;AAAA,MACvB,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ,QAAQ;AAAA,MAChB,QAAQ,QAAQ;AAAA,IAClB;AAAA,EACF,CAAC;AACD,UAAQ,SAAS;AACjB,MAAI,QAAQ,MAAM,aAAa;AAC7B,YAAQ,oBAAoB;AAC5B,YAAQ,WAAW;AAAA,EACrB;AACA,UAAQ;AAAA,EACR;AACA,SAAO,0BAA0B;AACjC,SAAO;AACT;AACA,SAAS,iBAAiB;AACxB,MAAI,CAAC,QAAQ;AACX,aAAS,qBAAqB;AAAA,EAChC;AACA,MAAI,CAAC,aAAa,cAAc,IAAW;AAAA,IACzC,OAAyC,mCAAS,QAAQ,cAAc;AAAA,EAC1E;AACA,MAAI,MAAwC;AAC1C,QAAI,SAAS;AACX,aAAO,gCAAgC,MAAM,eAAe,MAAM;AAAA,IACpE;AAAA,EACF;AACA,MAAI,CAAC,UAAU,WAAW,IAAW,gBAAS,OAAO,MAAM,QAAQ;AACnE,EAAO,uBAAgB,MAAM;AAC3B,QAAI,WAAW,QAAQ,UAAU,CAAC,QAAQ,mBAAmB;AAC3D,cAAQ,oBAAoB;AAC5B,cAAQ,OAAO,WAAW;AAAA,IAC5B;AAAA,EACF,GAAG,CAAC,CAAC;AACL,EAAO,uBAAgB,MAAM;AAC3B,QAAI,WAAW,QAAQ,QAAQ;AAC7B,aAAO,QAAQ,OAAO,UAAU,CAAC,aAAa;AAC5C,YAAI,SAAS,aAAa,UAAU;AAClC,sBAAY,SAAS,QAAQ;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AACb,YAAU,SAAS,wCAAwC;AAC3D;AAAA,IACE;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ,QAAQ;AAAA,EAClB;AACA;AAAA;AAAA;AAAA,IAGyB,qBAAqB,iBAAU,MAA6B;AAAA,MACjF,iBAAiB;AAAA,MACjB;AAAA,QACE,OAAO;AAAA,UACL,UAAU,QAAQ;AAAA,UAClB,cAAc,QAAQ;AAAA,UACtB,QAAQ,QAAQ,QAAQ;AAAA,UACxB;AAAA,UACA,WAAW,QAAQ,QAAQ;AAAA,QAC7B;AAAA,MACF;AAAA,MACuB,qBAAc,oBAAoB,EAAE,SAAS,GAA0B,qBAAc,iBAAiB,EAAE,OAAO,CAAC,CAAC;AAAA,IAC1I,GAA0B,qBAAqB,iBAAU,IAAI,CAAC;AAAA;AAElE;",
  "names": []
}
